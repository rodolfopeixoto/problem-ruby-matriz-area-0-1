exit
analyze_minimum(index_j)
exit
analyze_minimum(index_j)
next
@matrix[index_i][index_j]
exit
@submatrix_temporary[index_j]
submatrix[index_j]
@submatrix_temporary[index_j]
@temporary
submatrix
submarix
exit
@submatrix_temporary
exit
@maximum_square_size
next
exit
[@maximum_square_size, @submatrix_temporary[index_j]].max
@submatrix_temporary[index_j]
@maximum_square_size
next
exit
EXIT
exit
@submatrix_temporary[index_j]
analyze_minimum(index_j)
analyze_minimum(index_j(
@matrix[index_i][index_j] == 1
exit
@matrix[0 - 1][0-1]
@matrix[0 - 1][0]
@matrix[0][0]
@matrix[0
@matrix
index_j
index_i
@matrix[index_i - 1][index_j - 1]
@matrix[index_i - 1][index_j - 1] == 1
exit
next
index_j
next
index_j
next
index_j
exit
[temporary, @submatrix_temporary[index_j]].min + 1
[temporary, @submatrix_temporary[index_j]].min
@previous
@submatrix_temporary[index_j - 1]
temporary
exit
[@maximum_square_size, @submatrix_temporary[index_j]].max
next
@submatrix_temporary[index_j]
next
@submatrix_temporary[index_j]
next
@submatrix_temporary[index_j]
exit
[@maximum_square_size, @submatrix_temporary[index_j]].max
temporary
@submatrix_temporary[index_j]
@maximum_square_size
exit
@maximum_square_size
exit
cd ..
ls
@sub_matrix
sub_matrix
@previous
previous
temporary
